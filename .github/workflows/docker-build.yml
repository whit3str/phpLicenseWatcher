name: Build and Push Multi-Platform Docker Images

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io

jobs:
  # Build des images Linux multi-architecture
  build-linux:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-metadata: ${{ steps.build.outputs.metadata }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set lowercase repository name
      run: |
        echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Linux
      id: meta-linux
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-linux
          type=ref,event=pr,suffix=-linux
          type=semver,pattern={{version}},suffix=-linux
          type=semver,pattern={{major}}.{{minor}},suffix=-linux
          type=semver,pattern={{major}},suffix=-linux
          type=raw,value=latest-linux,enable={{is_default_branch}}

    - name: Build and push Linux image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile  # Ton Dockerfile Linux original
        platforms: |
          linux/amd64
          linux/arm64
          linux/arm/v7
          linux/ppc64le
          linux/s390x
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-linux.outputs.tags }}
        labels: ${{ steps.meta-linux.outputs.labels }}
        cache-from: type=gha,scope=linux
        cache-to: type=gha,mode=max,scope=linux

  # Build des images Windows
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-metadata: ${{ steps.build.outputs.metadata }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set lowercase repository name
      shell: powershell
      run: |
        $imageName = "$env:GITHUB_REPOSITORY".ToLower()
        echo "IMAGE_NAME=$imageName" >> $env:GITHUB_ENV

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Windows
      id: meta-windows
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-windows
          type=ref,event=pr,suffix=-windows
          type=semver,pattern={{version}},suffix=-windows
          type=semver,pattern={{major}}.{{minor}},suffix=-windows
          type=semver,pattern={{major}},suffix=-windows
          type=raw,value=latest-windows,enable={{is_default_branch}}

    - name: Build and push Windows image
      id: build
      shell: powershell
      run: |
        $tags = "${{ steps.meta-windows.outputs.tags }}" -split "`n"
        $tagArgs = @()
        foreach ($tag in $tags) {
          if ($tag.Trim()) {
            $tagArgs += "-t"
            $tagArgs += $tag.Trim()
          }
        }
        
        # Build l'image Windows
        docker build -f Dockerfile.windows $tagArgs .
        
        # Push seulement si ce n'est pas une PR
        if ("${{ github.event_name }}" -ne "pull_request") {
          foreach ($tag in $tags) {
            if ($tag.Trim()) {
              docker push $tag.Trim()
            }
          }
        }

  # Création du manifest multi-plateforme
  create-manifest:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: [build-linux, build-windows]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Set lowercase repository name
      run: |
        echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for manifest
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Create and push manifest
      run: |
        # Installation de Docker CLI avec support manifest expérimental
        export DOCKER_CLI_EXPERIMENTAL=enabled
        
        # Pour chaque tag, créer un manifest qui combine Linux et Windows
        echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r tag; do
          if [ -n "$tag" ]; then
            echo "Creating manifest for: $tag"
            
            # Créer le manifest en combinant les images Linux et Windows
            docker manifest create "$tag" \
              "${tag}-linux" \
              "${tag}-windows"
            
            # Annoter les images avec leur architecture/OS
            docker manifest annotate "$tag" "${tag}-linux" \
              --arch amd64 --os linux
            docker manifest annotate "$tag" "${tag}-linux" \
              --arch arm64 --os linux  
            docker manifest annotate "$tag" "${tag}-linux" \
              --arch arm --variant v7 --os linux
            docker manifest annotate "$tag" "${tag}-linux" \
              --arch ppc64le --os linux
            docker manifest annotate "$tag" "${tag}-linux" \
              --arch s390x --os linux
              
            docker manifest annotate "$tag" "${tag}-windows" \
              --arch amd64 --os windows
            
            # Push du manifest
            docker manifest push "$tag"
          fi
        done

    - name: Inspect final manifest
      run: |
        echo "${{ steps.meta.outputs.tags }}" | head -n1 | while IFS= read -r tag; do
          if [ -n "$tag" ]; then
            docker manifest inspect "$tag"
          fi
        done
