# syntax=docker/dockerfile:1
# escape=`

FROM mcr.microsoft.com/windows/servercore:ltsc2022

# Arguments automatiques de buildx
ARG TARGETPLATFORM
ARG TARGETOS  
ARG TARGETARCH
ARG BUILDPLATFORM

# Configuration PowerShell
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Affichage des informations de build pour debug
RUN Write-Host "Building for platform: $env:TARGETPLATFORM on $env:BUILDPLATFORM"

# Installation de Chocolatey et des packages nécessaires
RUN Set-ExecutionPolicy Bypass -Scope Process -Force; `
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; `
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')); `
    choco install php apache-httpd composer git -y --no-progress

# Configuration des extensions PHP
RUN $phpDir = 'C:\tools\php81'; `
    $phpIni = Join-Path $phpDir 'php.ini'; `
    if (Test-Path $phpIni) { `
        (Get-Content $phpIni) -replace ';extension=gd', 'extension=gd' `
            -replace ';extension=curl', 'extension=curl' `
            -replace ';extension=mbstring', 'extension=mbstring' `
            -replace ';extension=mysqli', 'extension=mysqli' `
            -replace ';extension=pdo_mysql', 'extension=pdo_mysql' `
            -replace ';extension=zip', 'extension=zip' | `
        Set-Content $phpIni `
    }

# Copier les fichiers de l'application
COPY . C:\Apache24\htdocs\

# Supprimer le fichier index.html qui interfère
RUN if (Test-Path 'C:\Apache24\htdocs\index.html') { Remove-Item 'C:\Apache24\htdocs\index.html' -Force }

# Créer les répertoires nécessaires
RUN New-Item -ItemType Directory -Path 'C:\opt\lmtools' -Force; `
    New-Item -ItemType Directory -Path 'C:\cache\phplw' -Force; `
    switch ($env:TARGETPLATFORM) { `
        'linux/amd64' { Write-Host 'Optimisation pour x86_64' } `
        'linux/arm64' { Write-Host 'Optimisation pour ARM64' } `
        'linux/arm/v7' { Write-Host 'Optimisation pour ARMv7' } `
        default { Write-Host "Architecture standard: $env:TARGETPLATFORM" } `
    }

WORKDIR C:\Apache24\htdocs

# Installation Composer avec gestion multi-arch
RUN if (Test-Path 'composer.json') { `
        switch ($env:TARGETARCH) { `
            'amd64' { composer install --no-dev --optimize-autoloader } `
            'arm64' { composer install --no-dev --optimize-autoloader --no-scripts } `
            'arm' { composer install --no-dev --optimize-autoloader --no-scripts } `
            default { composer install --no-dev --optimize-autoloader } `
        } `
    }

# Configuration d'Apache pour Windows
RUN $httpdConf = @' `
# Configuration Apache pour Windows
LoadModule rewrite_module modules/mod_rewrite.so
LoadModule php_module "C:/tools/php81/php8apache2_4.dll"

<IfModule dir_module>
    DirectoryIndex index.php index.html
</IfModule>

# Configuration PHP
PHPIniDir "C:/tools/php81"
AddType application/x-httpd-php .php

# VirtualHost
<VirtualHost *:80>
    ServerName localhost
    DocumentRoot "C:/Apache24/htdocs"
    
    <Directory "C:/Apache24/htdocs">
        AllowOverride All
        Require all granted
        Options Indexes FollowSymLinks
    </Directory>
    
    ErrorLog logs/error.log
    CustomLog logs/access.log combined
</VirtualHost>
'@; `
    $httpdConf | Out-File -FilePath 'C:\Apache24\conf\httpd.conf' -Encoding UTF8 -Append

# Configuration du Task Scheduler (équivalent cron Windows)
RUN schtasks /create /tn "License_Util" /tr "php C:\Apache24\htdocs\license_util.php" /sc minute /mo 15 /ru SYSTEM /f; `
    schtasks /create /tn "License_Cache" /tr "php C:\Apache24\htdocs\license_cache.php" /sc weekly /d MON /st 00:15 /ru SYSTEM /f; `
    schtasks /create /tn "License_Alert" /tr "php C:\Apache24\htdocs\license_alert.php" /sc weekly /d MON /st 06:00 /ru SYSTEM /f; `
    switch ($env:TARGETARCH) { `
        { $_ -in 'arm', 'arm64' } { Write-Host '# ARM architecture detected - using lighter scheduled tasks config' } `
        default { Write-Host '# Standard architecture scheduled tasks config' } `
    }

# Script d'entrée Windows
RUN $entryScript = @'
@echo off
echo Starting Apache and scheduled tasks...

REM Démarrer le service de planification de tâches
net start schedule

REM Démarrer Apache en arrière-plan
start /B "Apache" "C:\Apache24\bin\httpd.exe" -D FOREGROUND

REM Attendre que Apache soit prêt
timeout /t 5 /nobreak

echo Services started successfully
'@; `
    $entryScript | Out-File -FilePath 'C:\start-services.bat' -Encoding ASCII

# Ajout de métadonnées pour identifier l'architecture du conteneur
LABEL org.opencontainers.image.architecture="$TARGETARCH"
LABEL org.opencontainers.image.platform="$TARGETPLATFORM"

EXPOSE 80

# Utiliser le script d'entrée Windows
CMD ["C:\\start-services.bat"]
